name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Build APK
        shell: bash {0}
        run: |
          exit_on_error() { echo "$1"; exit 1; }

          echo "Setting vars"
          # Set RELEASE_VERSION_NAME to "<CURRENT_VERSION_NAME>+<last_commit_hash>"
          CURRENT_VERSION_NAME_REGEX='\s+versionName "([^"]+)"$'
          CURRENT_VERSION_NAME="$(grep -m 1 -E "$CURRENT_VERSION_NAME_REGEX" ./app/build.gradle | sed -r "s/$CURRENT_VERSION_NAME_REGEX/\1/")"
          RELEASE_VERSION_NAME="v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}" # The "+" is necessary so that versioning precedence is not affected
          if ! printf "%s" "${RELEASE_VERSION_NAME/v/}" | grep -qP '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'; then
            exit_on_error "The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html."
          fi

          APK_DIR_PATH="./app/build/outputs/apk/debug"
          APK_VERSION_TAG="$RELEASE_VERSION_NAME-github-debug" # Note the "-", GITHUB_SHA will already have "+" before it
          APK_BASENAME_PREFIX="termux-api_$APK_VERSION_TAG"

          # Used by attachment steps later
          echo "APK_DIR_PATH=$APK_DIR_PATH" >> $GITHUB_ENV
          echo "APK_VERSION_TAG=$APK_VERSION_TAG" >> $GITHUB_ENV
          echo "APK_BASENAME_PREFIX=$APK_BASENAME_PREFIX" >> $GITHUB_ENV

          echo "Building APK for '$RELEASE_VERSION_NAME' build"
          export TERMUX_API_APP_VERSION_NAME="${RELEASE_VERSION_NAME/v/}" # Used by app/build.gradle
          export TERMUX_API_APK_VERSION_TAG="$APK_VERSION_TAG" # Used by app/build.gradle
          if ! ./gradlew assembleDebug; then
            exit_on_error "Build failed for '$RELEASE_VERSION_NAME' build."
          fi

          echo "Validating APK"
          if ! test -f "$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk"; then
            files_found="$(ls "$APK_DIR_PATH")"
            exit_on_error "Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: "$'\n'"$files_found"
          fi

          echo "Generating sha25sums file"
          if ! (cd "$APK_DIR_PATH"; sha256sum "${APK_BASENAME_PREFIX}.apk" > sha256sums); then
            exit_on_error "Generate sha25sums failed for '$RELEASE_VERSION_NAME' release."
          fi

      - name: Attach files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APK_BASENAME_PREFIX }}
          path: |
            ${{ env.APK_DIR_PATH }}/${{ env.APK_BASENAME_PREFIX }}.apk
            ${{ env.APK_DIR_PATH }}/sha256sums
            ${{ env.APK_DIR_PATH }}/output-metadata.json
acciones/setup-java@v4.5.0
  con:
    # La versión de Java que se va a configurar. Acepta una versión completa o parcial de Java. Consulte ejemplos de sintaxis admitida en el archivo README
    java-version: # opcional
    # La ruta al archivo `.java-version`. Vea ejemplos de sintaxis admitida en el archivo README
    java-version-file: # opcional
    # Distribución de Java. Consulte la lista de distribuciones compatibles en el archivo README
    distribución:
    # El tipo de paquete (jdk, jre, jdk+fx, jre+fx)
    java-package: # opcional, el valor predeterminado es jdk
    # La arquitectura del paquete (por defecto la arquitectura del ejecutor de acciones)
    arquitectura: # opcional
    # Ruta donde se encuentra el JDK comprimido
    jdkFile: # opcional
    # Establezca esta opción si desea que la acción busque la última versión disponible que cumpla con la especificación de la versión.
    check-latest: # opcional
    # ID del repositorio de administración de distribución en el archivo pom.xml. El valor predeterminado es `github`
    server-id: # opcional, el valor predeterminado es github
    # Nombre de la variable de entorno para el nombre de usuario para la autenticación en el repositorio Apache Maven. El valor predeterminado es $GITHUB_ACTOR
    nombre-usuario-servidor: # opcional, el valor predeterminado es GITHUB_ACTOR
    # Nombre de la variable de entorno para la contraseña o el token para la autenticación en el repositorio Apache Maven. El valor predeterminado es $GITHUB_TOKEN
    contraseña del servidor: # opcional, el valor predeterminado es GITHUB_TOKEN
    # Ruta donde se escribirá el archivo settings.xml. El valor predeterminado es ~/.m2.
    ruta de configuración: # opcional
    # Sobrescriba el archivo settings.xml si existe. El valor predeterminado es "true".
    overwrite-settings: # opcional, el valor predeterminado es verdadero
    # Clave privada GPG para importar. El valor predeterminado es una cadena vacía.
    clave privada gpg: # opcional
    # Nombre de la variable de entorno para la contraseña de la clave privada GPG. El valor predeterminado es $GPG_PASSPHRASE.
    frase-contraseña-gpg: # opcional
    # Nombre de la plataforma de compilación para almacenar en caché las dependencias. Puede ser "maven", "gradle" o "sbt".
    caché: # opcional
    # La ruta a un archivo de dependencia: pom.xml, build.gradle, build.sbt, etc. Esta opción se puede usar con la opción `cache`. Si se omite esta opción, la acción busca el archivo de dependencia en todo el repositorio. Esta opción admite comodines y una lista de nombres de archivos para almacenar en caché varias dependencias.
    ruta de dependencia de caché: # opcional
    # Solución alternativa para pasar el estado del trabajo al paso posterior al trabajo. Esta variable no está destinada a la configuración manual
    job-status: # opcional, el valor predeterminado es ${{ job.status }}
    # El token que se utiliza para autenticar al obtener manifiestos de versiones alojados en github.com, como para Microsoft Build de OpenJDK. Al ejecutar esta acción en github.com, el valor predeterminado es suficiente. Al ejecutar en GHES, puede pasar un token de acceso personal para github.com si experimenta una limitación de velocidad.
    token: # opcional, el valor predeterminado es ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Nombre del ID de la cadena de herramientas de Maven si no se desea el nombre predeterminado "${distribution}_${java-version}". Consulte ejemplos de sintaxis admitida en el archivo de uso avanzado
    mvn-toolchain-id: # opcional
    # Nombre del proveedor de la cadena de herramientas de Maven si no se desea el nombre predeterminado "${distribution}". Consulte ejemplos de sintaxis admitida en el archivo de uso avanzado
    mvn-toolchain-vendor: # opcional
          
